@page "{userId}"
@using Content.Server.Database
@using SS14.Admin.Helpers
@using SS14.Admin.Pages.Tables
@using System.Diagnostics
@using Content.Shared.Database
@model SS14.Admin.Pages.Players.Info

@{
    ViewData["Title"] = $"Player Info for {Model.Player.LastSeenUserName}";
}

<div class="container">
    <h1>Player information for @Model.Player.LastSeenUserName</h1>

    <dl class="row">
        <dt class="col-sm-2">User ID:</dt>
        <dd class="col-sm-10 font-monospace">@Model.Player.UserId</dd>
        <dt class="col-sm-2">Last seen username:</dt>
        <dd class="col-sm-10">@Model.Player.LastSeenUserName</dd>
        <dt class="col-sm-2">First seen time:</dt>
        <dd class="col-sm-10">@Model.Player.FirstSeenTime.ToString("yyyy-MM-dd HH:mm:ss")</dd>
        <dt class="col-sm-2">Last seen time:</dt>
        <dd class="col-sm-10">@Model.Player.LastSeenTime.ToString("yyyy-MM-dd HH:mm:ss")</dd>
        @if (User.IsInRole(Constants.PIIRole))
        {
            <dt class="col-sm-2">Last seen address:</dt>
            <dd class="col-sm-10 font-monospace">
                <a asp-page="../Connections/Index" asp-route-search="@Model.Player.LastSeenAddress">
                    @Model.Player.LastSeenAddress
                </a>
            </dd>
            <dt class="col-sm-2">Last seen HWID:</dt>
            <dd class="col-sm-10 font-monospace">
                <a asp-page="../Connections/Index" asp-route-search="@BanHelper.FormatHwid(Model.Player.LastSeenHWId)">
                    @BanHelper.FormatHwid(Model.Player.LastSeenHWId)
                </a>
            </dd>
        }
        <dt class="col-sm-2">Whitelisted:</dt>
        <dd class="col-sm-10 font-monospace">
            @if (Model.Whitelisted)
            {
                <text><strong>✔️ yes</strong> (<a asp-page="../Whitelist/RemoveWhitelist" asp-route-userId="@Model.Player.UserId">remove</a>)</text>
            }
            else
            {
                <text><strong>❌ no</strong> (<a asp-page="../Whitelist/AddWhitelist" asp-route-name="@Model.Player.UserId">add</a>)</text>
            }
        </dd>
    </dl>
</div>

<div class="container">
    <h2>Play time</h2>

    <table class="table table-striped mt-3">
        <thead>
        <tr>
            <th>Timer</th>
            <th>Time played (h:mm)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var tracker in Model.PlayTimes)
        {
            <tr>
                <td class="font-weight-bold">@tracker.Tracker</td>
                <td>@((int)tracker.TimeSpent.TotalHours):@tracker.TimeSpent.Minutes.ToString("D2")</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="container">
    <h2>Role whitelists</h2>
    @{
        var sl = "CMJobSquadLeader";
        var squad = new[] { "CMJobRifleman", "CMJobCombatTech", "CMJobHospitalCorpsman", "CMJobSmartGunOperator", "CMJobWeaponsSpecialist", "CMJobFireteamLeader", sl };
        var engi = new[] { "CMJobCombatTech", "CMJobMaintTech", "CMJobOrdnanceTech", "CMJobChiefEngineer" };
        var warden = "CMJobMilitaryWarden";
        var cmp = "CMJobChiefMP";
        var mp = new[] { "CMJobMilitaryPolice", warden, cmp };
        var medical = new[] { "CMJobHospitalCorpsman", "CMJobNurse", "CMJobDoctor", "CMJobResearcher", "CMJobCMO" };
        var xo = "CMJobExecutiveOfficer";
        var command = new[] { "CMJobStaffOfficer", xo, "CMJobCommandingOfficer" };
        var req = new[] { "CMJobCargoTech", "CMJobQuartermaster" };

        TimeSpan GetTime(RoleWhitelistRequirement requirement)
        {
            return Model.PlayTimes.Where(t => requirement.Roles.Contains(t.Tracker)).Aggregate(TimeSpan.Zero, (a, b) => a + b.TimeSpent);
        }

        string GetTimeString(RoleWhitelistRequirement requirement)
        {
            var time = GetTime(requirement);
            var symbol = time >= requirement.Time ? "✔️" : "❌";
            return $"{symbol} {requirement.Name} ({time.TotalHours:F1} / {requirement.Time.TotalHours:F0})";
        }

        string AllMetSymbol(List<RoleWhitelistRequirement> requirements)
        {
            return requirements.All(requirement => GetTime(requirement) > requirement.Time) ? "✔️" : "❌";
        }

        var sea = new List<RoleWhitelistRequirement>
        {
            new("Squad", TimeSpan.FromHours(15), squad),
            new("Engineering", TimeSpan.FromHours(10), engi),
            new("Military Police", TimeSpan.FromHours(15), mp),
            new("Medical", TimeSpan.FromHours(15), medical),
            new("Command", TimeSpan.FromHours(15), command),
            new("Requisitions", TimeSpan.FromHours(10), req)
        };
        <details>
            <summary>Senior Enlisted Advisor Requirements @AllMetSymbol(sea)</summary>
            @foreach (var timer in sea.Select(GetTimeString))
            {
                @timer
                <br/>
            }
        </details>

        var co = new List<RoleWhitelistRequirement>
        {
            new("Squad", TimeSpan.FromHours(35), squad),
            new("Engineering", TimeSpan.FromHours(10), engi),
            new("Military Police", TimeSpan.FromHours(30), mp),
            new("Warden", TimeSpan.FromHours(10), [warden]),
            new("Chief MP", TimeSpan.FromHours(10), [cmp]),
            new("Medical", TimeSpan.FromHours(10), medical),
            new("Command", TimeSpan.FromHours(20), command),
            new("Executive Officer", TimeSpan.FromHours(30), [xo]),
        };
        <details>
            <summary>Commanding Officer Requirements @AllMetSymbol(co)</summary>
            @foreach (var timer in co.Select(GetTimeString))
            {
                @timer
                <br/>
            }
        </details>
    }
</div>

<div class="container mb-3">
    <h2>Character profiles</h2>

    <table class="table table-striped mt-3">
        <thead>
        <tr>
            <th>Name</th>
            <th>Age</th>
            <th>Sex</th>
            <th>Gender</th>
            <th>Species</th>
            <th>Favorite job</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var profile in Model.Profiles)
        {
            <tr>
                <td class="font-weight-bold">@profile.CharacterName</td>
                <td>@profile.Age</td>
                <td>@profile.Sex</td>
                <td>@profile.Gender</td>
                <td>@profile.Species</td>
                @{ var favJob = profile.Jobs.SingleOrDefault(e => e.Priority == DbJobPriority.High); }
                <td>@(favJob == null ? "none" : favJob.JobName)</td>
            </tr>
        }
        </tbody>
    </table>
</div>


<div class="container-fluid">
    <h2>Notes</h2>

    <span class="small">Total: @Model.Remarks.Length</span>
    <table class="table table-striped mt-3">
        <thead>
        <tr>
            <th style="min-width: 110px">Type</th>
            <th>Message</th>
            <th>Round</th>
            <th style="min-width: 100px">Severity</th>
            <th>Visible/Seen</th>
            <th>Playtime (h:mm)</th>
            <th style="min-width: 130px">Expires (UTC)</th>
            <th>Created (UTC)</th>
            <th>Edited (UTC)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var remark in Model.Remarks)
        {
            <tr>
                <td>
                    @switch (remark)
                    {
                        case AdminMessage:
                            <span class="text-success"><i class="fas fa-envelope"></i> Message</span>
                            break;
                        case AdminNote:
                            <span class="text-info"><i class="fas fa-clipboard"></i> Note</span>
                            break;
                        case AdminWatchlist:
                            <span class="text-warning"><i class="fas fa-eye"></i> Watchlist</span>

                            break;
                        default:
                            throw new UnreachableException();
                    }
                </td>
                <td>@remark.Message</td>
                <td>@remark.RoundId</td>
                <td>
                    @if (remark is AdminNote note)
                    {
                        switch (note.Severity)
                        {
                            case NoteSeverity.None:
                                <span class="text-secondary"><i class="fas fa-check-circle"></i> None</span>
                                break;
                            case NoteSeverity.Minor:
                                <span class="text-info"><i class="fas fa-minus-circle"></i> Minor</span>
                                break;
                            case NoteSeverity.Medium:
                                <span class="text-warning"><i class="fas fa-exclamation-circle"></i> Medium</span>
                                break;
                            case NoteSeverity.High:
                                <span class="text-danger"><i class="fas fa-exclamation-triangle"></i> High</span>
                                break;
                            default:
                                <text><i class="fas fa-question"></i> Unknown</text>
                                break;
                        }
                    }
                    else
                    {
                        <span class="text-secondary">N/A</span>
                    }
                </td>
                <td>
                    @switch (remark)
                    {
                        case AdminMessage adminMessage:
                            if (adminMessage.Seen)
                            {
                                <span class="text-success"><i class="fas fa-eye"></i> Seen</span>
                            }
                            else
                            {
                                <span class="text-secondary"><i class="fas fa-eye-slash"></i> Not seen</span>
                            }

                            break;
                        case AdminNote adminNote:
                            if (adminNote.Secret)
                            {
                                <span class="text-info"><i class="fas fa-eye-slash"></i> Secret</span>
                            }
                            else
                            {
                                <span class="text-success"><i class="fas fa-eye"></i> Visible</span>
                            }

                            break;
                        case AdminWatchlist:
                            <span class="text-secondary">N/A</span>
                            break;
                        default:
                            throw new UnreachableException();
                    }
                </td>
                <td>@((int)remark.PlaytimeAtNote.TotalHours):@remark.PlaytimeAtNote.Minutes.ToString("D2")</td>
                <td>
                    @if (remark.ExpirationTime is { } expires)
                    {
                        var utc = expires.ToUniversalTime();
                        var diff = utc - DateTime.UtcNow;
                        @expires.ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss")<br/>
                        <text>(in @diff.Days days @diff.Hours:@diff.Minutes)</text>
                    }
                    else
                    {
                        <text>Permanent</text>
                    }
                </td>
                <td>
                    @remark.CreatedAt.ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss")<br/>
                    <span class="text-secondary">by @(remark.CreatedBy?.LastSeenUserName ?? "unknown")</span>
                </td>
                <td>
                    @if (remark.LastEditedAt > remark.CreatedAt)
                    {
                        @remark.LastEditedAt.Value.ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss")<br/>
                        <span class="text-secondary">by @(remark.LastEditedBy?.LastSeenUserName ?? "unknown")</span>
                    }
                    else
                    {
                        <span class="text-secondary">No</span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="container-fluid">
    <h2>Bans</h2>
    <partial name="Tables/BansTable" model="@(new BansTableModel(Model.GameSortState,Model.GameBanPagination, 0 ,false))"/>
</div>

<div class="container-fluid">
    <h2>Role Bans</h2>
    <partial name="Tables/RoleBansTable" model="@(new RoleBansTableModel(Model.RoleSortState,Model.RoleBanPagination, 0, false))"/>
</div>
